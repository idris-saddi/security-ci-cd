name: CI/CD Pipeline DevSecOps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies and Run Unit Tests
      working-directory: ./app
      run: |
        npm install
        npm test
        
    - name: Build Docker Image
      run: docker build -t my-app-image .

    # --- SÉCURITÉ : SAST & SCA ---

    - name: Install Snyk
      run: npm install -g snyk
      
    - name: Snyk Authorization
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Secret GitHub requis
      run: snyk auth $SNYK_TOKEN
      
    - name: Snyk SCA (Dependency Check)
      id: snyk_sca
      continue-on-error: true # Pour capturer le résultat sans faire échouer l'étape immédiatement
      working-directory: ./app
      run: snyk test --json > snyk-sca-results.json

    - name: Snyk SAST (Code Analysis)
      id: snyk_sast
      continue-on-error: true # Pour capturer le résultat sans faire échouer l'étape immédiatement
      working-directory: ./app
      run: snyk code test --json > snyk-sast-results.json
      
    - name: Security Gate Check (Critique/Haute)
      env:
        SNYK_SCA_RESULTS: ${{ steps.snyk_sca.outputs.results }}
      run: |
        echo "Exécution de la vérification de la porte de sécurité (SAST/SCA)..."
        
        snyk test --severity-threshold=high || (echo "ECHEC: Vulnérabilités SCA Critiques/Hautes détectées." && exit 1)
        snyk code test --severity-threshold=high || (echo "ECHEC: Vulnérabilités SAST Critiques/Hautes détectées." && exit 1)
        
        echo "SAST/SCA PASSÉ."


  dast_scan:
    runs-on: ubuntu-latest
    needs: build_and_test # Dépend du succès du job précédent
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build and Run Application Container (Éphémère)
      # Lance le conteneur en arrière-plan
      run: |
        docker build -t app-to-scan .
        docker run -d --name app-ephemere -p 3000:3000 app-to-scan
        echo "Attente du démarrage de l'application..."
        sleep 10 # Laisser le temps à l'application de démarrer

    - name: Run OWASP ZAP Baseline Scan (DAST)
      id: zap_scan
      uses: 'docker://ghcr.io/zaproxy/action-baseline:v0.12.0'
      with:
        # target: 'http://app-ephemere:3000' # L'application est accessible sur localhost:3000 depuis l'hôte, mais ici l'action le gère différemment. Il est plus simple d'utiliser 'http://host.docker.internal:3000' ou l'IP si l'application tourne dans un conteneur et ZAP dans un autre.
        # Pour une simplicité dans GitHub Actions, utilisez directement localhost:3000 si l'application est démarrée sur l'hôte,
        # ou utilisez les services de conteneurisation de GitHub Actions (plus complexe).
        # Nous allons tricher un peu en utilisant `http://localhost:3000` et en espérant que le Docker Action de ZAP puisse l'atteindre.
        target: 'http://localhost:3000' 
        
    - name: Check ZAP Results for Critical/High Fails
      # Le ZAP Baseline scan ne fait que scanner ce qu'il trouve par défaut.
      # L'action ZAP retourne un code d'erreur si des ALERTES HIGH/CRITICAL sont détectées.
      # La gestion est intégrée dans l'action ZAP !
      run: |
        echo "Vérification des résultats ZAP..."
        # L'action ZAP échoue par défaut s'il trouve des alertes High/Critical.
        # Si cette étape est atteinte, cela signifie que le scan DAST est passé.
        echo "DAST PASSÉ (Aucune faille Critique/Haute trouvée par ZAP)."
      
    - name: Stop and Remove Container
      if: always() # Toujours exécuté, même en cas d'échec
      run: docker rm -f app-ephemere